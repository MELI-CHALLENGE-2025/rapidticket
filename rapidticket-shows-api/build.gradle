plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'jacoco'
}

group = 'com.rapidticket'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mapstruct:mapstruct:1.6.3'

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.jacoco:org.jacoco.agent:0.8.11'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.11"
}

sonar {
	properties {
		property "sonar.projectKey", "com.rapidticket:show"
		property "sonar.projectName", "RapidTicket Show Service"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.login", "sqa_b18456ae3dd075f2c7728e733a23198227fa5e8f"
		property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.qualitygate.wait", true
	}
}

tasks.jacocoTestReport {
	dependsOn tasks.test
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}
}

tasks.test {
	useJUnitPlatform()
	finalizedBy tasks.jacocoTestReport
}

tasks.jacocoTestCoverageVerification {
	dependsOn tasks.jacocoTestReport
	violationRules {
		rule {
			limit {
				minimum = 0.90
			}
		}
	}
}